var cacheName = 'PWADemo-v2';
var filesToCache = [
    '/',
    '/index.html',
    '/js/app.js',
    '/css/materialize.min.css',
    '/js/jquery-1.11.3.min.js',
    '/js/materialize.min.js',
    '/fonts/roboto/Roboto-Bold.woff',
    '/fonts/roboto/Roboto-Bold.woff2',
    '/fonts/roboto/Roboto-Light.woff',
    '/fonts/roboto/Roboto-Light.woff2',
    '/fonts/roboto/Roboto-Medium.woff',
    '/fonts/roboto/Roboto-Medium.woff2',
    '/fonts/roboto/Roboto-Regular.woff',
    '/fonts/roboto/Roboto-Regular.woff2',
    '/fonts/roboto/Roboto-Thin.woff',
    '/fonts/roboto/Roboto-Thin.woff2'
];

/**
 * wait for service worker to install
 */
self.addEventListener('install', function(e) {
    console.log('[ServiceWorker] Install', e, caches);
    e.waitUntil(
        //open cache and add files to cache
        caches.open(cacheName).then(function(cache) {
            console.log('[ServiceWorker] Caching app shell');
            return cache.addAll(filesToCache);
        })
    );
});

/**
 * when new sw/cache is created, remove old one
 */
self.addEventListener('activate', function(e) {
    console.log('[ServiceWorker] Activate');
    e.waitUntil(
        caches.keys().then(function(keyList) {
            return Promise.all(keyList.map(function(key) {
                //delete all cache names that don't match current cache
                if (key !== cacheName) {
                    console.log('[ServiceWorker] Removing old cache', key);
                    return caches.delete(key);
                }
            }));
        })
    );
}); 

/**
 * 
 */
self.addEventListener('fetch', function(e) {
    console.log('[Service Worker] Fetch', e.request.url);
//    var dataUrl = 'https://query.yahooapis.com/v1/public/yql';
//    if (e.request.url.indexOf(dataUrl) > -1) {
      /*
       * When the request URL contains dataUrl, the app is asking for fresh
       * weather data. In this case, the service worker always goes to the
       * network and then caches the response. This is called the "Cache then
       * network" strategy:
       * https://jakearchibald.com/2014/offline-cookbook/#cache-then-network
       */
//      e.respondWith(
//        caches.open(dataCacheName).then(function(cache) {
//          return fetch(e.request).then(function(response){
//            cache.put(e.request.url, response.clone());
//            return response;
//          });
//        })
//      );
//    } else {
      /*
       * The app is asking for app shell files. In this scenario the app uses the
       * "Cache, falling back to the network" offline strategy:
       * https://jakearchibald.com/2014/offline-cookbook/#cache-falling-back-to-network
       */
      e.respondWith(
        caches.match(e.request).then(function(response) {
          return response || fetch(e.request);
        })
      );
//    }
});
  